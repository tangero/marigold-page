import os
import yaml
import frontmatter
from pathlib import Path
import requests
import json
from time import sleep
from datetime import datetime
import re
import sys
import html
from dotenv import load_dotenv

# Naƒçten√≠ promƒõnn√Ωch z .env souboru
env_path = "/Users/imac/Documents/GitHub/zastupitelstvo/.env"
load_dotenv(env_path)

class MarkdownValidator:
    """T≈ô√≠da pro validaci Markdown soubor≈Ø s YAML front matter."""
    
    def __init__(self, fix_issues=False):
        self.fix_issues = fix_issues
        self.validation_stats = {
            'total': 0,
            'valid': 0,
            'fixed': 0,
            'invalid': 0,
            'errors': {}
        }
    
    def validate_yaml_file(self, file_path):
        """Validuje YAML front matter v Markdown souboru."""
        self.validation_stats['total'] += 1
        issues = []
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
        except Exception as e:
            self.validation_stats['invalid'] += 1
            error_type = "file_read_error"
            if error_type not in self.validation_stats['errors']:
                self.validation_stats['errors'][error_type] = 0
            self.validation_stats['errors'][error_type] += 1
            return False, [f"Chyba p≈ôi ƒçten√≠ souboru: {e}"], None
        
        # Kontrola YAML front matter
        if not content.startswith('---'):
            self.validation_stats['invalid'] += 1
            error_type = "no_front_matter"
            if error_type not in self.validation_stats['errors']:
                self.validation_stats['errors'][error_type] = 0
            self.validation_stats['errors'][error_type] += 1
            return False, ["Chyb√≠ YAML front matter"], None
        
        # Extrakce front matter
        match = re.match(r'^---\n(.*?)\n---', content, re.DOTALL)
        if not match:
            self.validation_stats['invalid'] += 1
            error_type = "invalid_front_matter_format"
            if error_type not in self.validation_stats['errors']:
                self.validation_stats['errors'][error_type] = 0
            self.validation_stats['errors'][error_type] += 1
            return False, ["Neplatn√Ω form√°t YAML front matter"], None
        
        # Parsov√°n√≠ YAML
        try:
            yaml_content = match.group(1)
            yaml_data = yaml.safe_load(yaml_content)
            
            if yaml_data is None:
                self.validation_stats['invalid'] += 1
                error_type = "empty_front_matter"
                if error_type not in self.validation_stats['errors']:
                    self.validation_stats['errors'][error_type] = 0
                self.validation_stats['errors'][error_type] += 1
                return False, ["Pr√°zdn√Ω YAML front matter"], None
            
            # Kontrola po≈æadovan√Ωch pol√≠
            if 'title' not in yaml_data:
                issues.append("Chyb√≠ povinn√© pole: 'title'")
            
            # Pokud m√°me title, kontrolujeme jeho form√°t
            if 'title' in yaml_data:
                title = yaml_data['title']
                
                # Kontrola HTML entit v title
                if any(entity in str(title) for entity in ['&nbsp;', '&#', '&quot;', '&amp;']):
                    issues.append(f"Title obsahuje HTML entity: {title}")
                
                # Kontrola uvozovek kolem title
                if isinstance(title, str) and ((title.startswith('"') and title.endswith('"')) or 
                                             (title.startswith("'") and title.endswith("'"))):
                    issues.append(f"Title m√° uvozovky kolem: {title}")
                
                # Kontrola na dvojteƒçky v title
                if isinstance(title, str) and ':' in title:
                    issues.append(f"Title obsahuje dvojteƒçku, co≈æ m≈Ø≈æe zp≈Øsobit probl√©my v YAML: {title}")
        except yaml.YAMLError as e:
            self.validation_stats['invalid'] += 1
            error_type = "yaml_syntax_error"
            if error_type not in self.validation_stats['errors']:
                self.validation_stats['errors'][error_type] = 0
            self.validation_stats['errors'][error_type] += 1
            return False, [f"Chyba syntaxe YAML: {e}"], None
        
        # Pokud nejsou ≈æ√°dn√© probl√©my, soubor je platn√Ω
        if not issues:
            self.validation_stats['valid'] += 1
            return True, [], yaml_data
        
        # Jinak m√°me neplatn√Ω soubor
        self.validation_stats['invalid'] += 1
        for issue in issues:
            error_type = issue.split(":")[0].strip().lower().replace(" ", "_")
            if error_type not in self.validation_stats['errors']:
                self.validation_stats['errors'][error_type] = 0
            self.validation_stats['errors'][error_type] += 1
        
        return False, issues, yaml_data
    
    def fix_yaml_issues(self, file_path, yaml_data):
        """Opravuje probl√©my v YAML front matter."""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Extrakce front matter a obsahu
            parts = content.split('---', 2)
            if len(parts) < 3:
                return False, "Neplatn√Ω form√°t pro opravu"
            
            front_matter = parts[1]
            body = parts[2]
            
            # Naj√≠t title v front matter pomoc√≠ p≈ôesnƒõj≈°√≠ho regex vzoru
            # Hled√°me ≈ô√°dek zaƒç√≠naj√≠c√≠ "title:" n√°sledovan√Ω hodnotou
            title_match = re.search(r'^title:.*?$', front_matter, re.MULTILINE)
            if not title_match:
                return False, "Nelze naj√≠t title v YAML front matter"
            
            title_line = title_match.group(0)
            # Extrahujeme hodnotu po "title:"
            title_value = re.sub(r'^title:\s*', '', title_line).strip()
            
            # Odstranit existuj√≠c√≠ uvozovky
            if (title_value.startswith('"') and title_value.endswith('"')) or (title_value.startswith("'") and title_value.endswith("'")):
                if title_value.startswith('"'):
                    title_value = title_value[1:-1]
                else:
                    title_value = title_value[1:-1]
            
            # Opravit v√≠ce≈ô√°dkov√© nadpisy
            title_value = re.sub(r'\s+', ' ', title_value.strip())
            
            # Dek√≥dovat HTML entity
            title_value = html.unescape(title_value)
            
            # Odstranit zb√Ωvaj√≠c√≠ uvozovky nebo apostrofy
            title_value = title_value.replace('"', '').replace("'", '')
            
            # Nahradit dvojteƒçky pomlƒçkami s mezerami
            title_value = title_value.replace(':', ' - ')
            
            # Vytvo≈ôit nov√Ω title
            new_title_line = f'title: {title_value}'
            
            # Nahradit title v front matter - pou≈æijeme pouze p≈ôesn√Ω ≈ô√°dek s title
            new_front_matter = front_matter.replace(title_line, new_title_line)
            
            # Rekonstruovat obsah
            new_content = f"---{new_front_matter}---{body}"
            
            # Zapsat zpƒõt do souboru
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(new_content)
            
            self.validation_stats['fixed'] += 1
            return True, "Soubor opraven"
        except Exception as e:
            return False, f"Chyba p≈ôi opravƒõ souboru: {e}"
    
    def validate_all_md_files(self, directory):
        """Validuje v≈°echny Markdown soubory v dan√©m adres√°≈ôi a jeho podadres√°≈ô√≠ch."""
        md_files = list(Path(directory).glob('**/*.md'))
        print(f"Nalezeno {len(md_files)} .md soubor≈Ø")
        
        invalid_files = []
        
        for file_path in md_files:
            is_valid, issues, yaml_data = self.validate_yaml_file(file_path)
            if not is_valid:
                if self.fix_issues:
                    fixed, message = self.fix_yaml_issues(file_path, yaml_data)
                    if fixed:
                        print(f"üîß {file_path}: Opraveno")
                    else:
                        invalid_files.append((file_path, issues))
                        print(f"‚ùå {file_path}: {', '.join(issues)} - {message}")
                else:
                    invalid_files.append((file_path, issues))
                    print(f"‚ùå {file_path}: {', '.join(issues)}")
            else:
                print(f"‚úÖ {file_path}")
        
        if invalid_files:
            print(f"\n‚ùå Nalezeno {len(invalid_files)} neplatn√Ωch soubor≈Ø:")
            for file_path, issues in invalid_files:
                print(f"  - {file_path}: {', '.join(issues)}")
        else:
            print("\n‚úÖ V≈°echny soubory jsou platn√©!")
        
        print("\nStatistika validace:")
        print(f"Celkem soubor≈Ø: {self.validation_stats['total']}")
        print(f"Platn√Ωch soubor≈Ø: {self.validation_stats['valid']}")
        if self.fix_issues:
            print(f"Opraven√Ωch soubor≈Ø: {self.validation_stats['fixed']}")
        print(f"Neplatn√Ωch soubor≈Ø: {self.validation_stats['invalid'] - self.validation_stats['fixed'] if self.fix_issues else self.validation_stats['invalid']}")
        
        print("\nTypy chyb:")
        for error_type, count in self.validation_stats['errors'].items():
            print(f"  - {error_type}: {count}")
        
        return len(invalid_files) == 0


class LocalSummaryGenerator:
    def __init__(self, api_key, model_choice, posts_dir="_posts"):
        # Ovƒõ≈ô√≠me, ≈æe API kl√≠ƒç byl spr√°vnƒõ naƒçten
        if not api_key or len(api_key) < 10:
            print(f"‚ö†Ô∏è VAROV√ÅN√ç: API kl√≠ƒç se nezd√° b√Ωt validn√≠: '{api_key}'")
            print("Zkou≈°√≠m naƒç√≠st API kl√≠ƒç p≈ô√≠mo z env promƒõnn√Ωch...")
            api_key = os.getenv("OPENROUTER_API_KEY")
            print(f"API kl√≠ƒç naƒçten√Ω z env: {api_key[:10]}... (d√©lka: {len(api_key) if api_key else 0})")
        
        self.api_key = api_key
        self.model_choice = model_choice
        self.posts_dir = Path(posts_dir)
        
        # DeepSeek m√° vlastn√≠ API endpoint a kl√≠ƒç
        if model_choice == "deepseek":
            self.api_key = os.getenv("DEEPSEEK_API_KEY") or api_key
            self.api_url = "https://api.deepseek.com/v1/chat/completions"
            print(f"Pou≈æ√≠v√°m DeepSeek API kl√≠ƒç: {self.api_key[:10]}... (d√©lka: {len(self.api_key) if self.api_key else 0})")
        else:  # Pro OpenRouter (Gemini model)
            self.api_url = "https://openrouter.ai/api/v1/chat/completions"
            print(f"Pou≈æ√≠v√°m OpenRouter API kl√≠ƒç: {self.api_key[:10]}... (d√©lka: {len(self.api_key) if self.api_key else 0})")
            
        self.newsletter_processed = False  # newsletter zpracujeme pouze jednou

    def truncate_content(self, content, max_chars=10000):
        """Zkr√°t√≠ obsah ƒçl√°nku na maxim√°ln√≠ d√©lku p≈ôi zachov√°n√≠ cel√Ωch vƒõt."""
        if len(content) <= max_chars:
            return content
        more_split = content.split('<!-- more -->')
        if len(more_split) > 1:
            content = more_split[0]
            if len(content) <= max_chars:
                return content
        truncated = content[:max_chars]
        last_period = truncated.rfind('.')
        if last_period > 0:
            return truncated[:last_period + 1]
        return truncated

    def get_post_date(self, filename):
        """Extrahuje datum z n√°zvu souboru Jekyll ƒçl√°nku (YYYY-MM-DD-title.md)"""
        date_pattern = r'(\d{4}-\d{2}-\d{2})'
        match = re.match(date_pattern, filename)
        if match:
            return datetime.strptime(match.group(1), '%Y-%m-%d')
        return None

    def generate_summary(self, content, max_retries=5):
        """Generuje shrnut√≠ pomoc√≠ API s automatick√Ωm retry."""
        # Nastaven√≠ API hlaviƒçek podle typu modelu
        if self.model_choice == "deepseek":
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
        else:  # OpenRouter
            # Upraven√© hlaviƒçky s r≈Øzn√Ωmi form√°ty autorizace
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json",
                "HTTP-Referer": "https://www.marigold.cz/",
                "X-Title": "Marigold.cz"
            }
        
        print(f"Model: {self.model_choice}")
        print(f"API URL: {self.api_url}")
        print(f"Pou≈æit√Ω API kl√≠ƒç (prvn√≠ch 10 znak≈Ø): {self.api_key[:10]}...")
        print(f"Kompletn√≠ hlaviƒçky: {headers}")
        
        prompt = """Vytvo≈ô 3-4 kr√°tk√© body shrnuj√≠c√≠ hlavn√≠ my≈°lenky n√°sleduj√≠c√≠ho ƒçesk√©ho textu.
Ka≈æd√Ω bod by mƒõl:
- B√Ωt struƒçn√Ω (max 15 slov)
- Obsahovat konkr√©tn√≠ informaci
- B√Ωt v ƒçist√©m textu BEZ form√°tov√°n√≠, ƒç√≠slov√°n√≠ nebo pomlƒçek
- Zaƒç√≠nat p≈ô√≠mo kl√≠ƒçovou informac√≠

Text k shrnut√≠:

{content}"""
        if self.model_choice == "deepseek":
            payload = {
                "messages": [
                    {
                        "role": "user",
                        "content": prompt.format(content=content)
                    }
                ],
                "model": "deepseek-chat",  # DeepSeek API pou≈æ√≠v√° jin√Ω form√°t model≈Ø
                "max_tokens": 500,
                "temperature": 0.3
            }
        else:  # gemini p≈ôes OpenRouter
            payload = {
                "messages": [
                    {
                        "role": "user",
                        "content": prompt.format(content=content)
                    }
                ],
                "model": "google/gemini-2.0-flash-001",
                "max_tokens": 500,
                "temperature": 0.3
            }
        
        # V√Ωpis ekvivalentn√≠ho CURL p≈ô√≠kazu pro debugging
        curl_command = f"curl -X POST {self.api_url} \\\n"
        for header, value in headers.items():
            curl_command += f"  -H '{header}: {value}' \\\n"
        curl_command += f"  -d '{json.dumps(payload)}'"
        print(f"Ekvivalentn√≠ CURL p≈ô√≠kaz (pro debug):\n{curl_command}")
        
        base_wait_time = 10
        
        for attempt in range(max_retries):
            try:
                if attempt > 0:
                    wait_time = base_wait_time * (1.5 ** attempt)
                    print(f"\nPokus {attempt + 1}/{max_retries}, ƒçek√°m {int(wait_time)} sekund...")
                    print("Stisknƒõte Ctrl+C pro p≈ôeskoƒçen√≠ ƒçl√°nku...")
                    try:
                        sleep(wait_time)
                    except KeyboardInterrupt:
                        print("\nP≈ôeskakuji tento ƒçl√°nek...")
                        return None

                model_info = "Deepseek (zdarma)" if self.model_choice == "deepseek" else "Gemini"
                print(f"Pou≈æ√≠v√°m model: {model_info}")
                
                # P≈ô√≠m√© nastaven√≠ API kl√≠ƒçe p≈ôes Bearer token
                headers["Authorization"] = f"Bearer {self.api_key.strip()}"
                
                response = requests.post(
                    self.api_url,
                    headers=headers,
                    json=payload,
                    timeout=60
                )
                
                print(f"Status k√≥d odpovƒõdi: {response.status_code}")
                
                try:
                    response_json = response.json()
                except Exception as e:
                    print("Chyba p≈ôi ƒçten√≠ odpovƒõdi API:", str(e))
                    continue

                # V√Ωpis cel√© odpovƒõdi pro ladƒõn√≠
                print("API odpovƒõƒè:", response_json)
                
                if response.status_code == 200 and "choices" in response_json:
                    choices = response_json["choices"]
                    if choices and "message" in choices[0]:
                        message = choices[0]["message"]["content"].strip()
                        # Oƒçek√°v√°me, ≈æe body budou oddƒõlen√© nov√Ωm ≈ô√°dkem
                        summary_points = [line.strip() for line in message.split("\n") if line.strip()]
                        if summary_points:
                            return summary_points
                print("Nebyly z√≠sk√°ny ≈æ√°dn√© body shrnut√≠.")
            except Exception as e:
                print(f"Chyba p≈ôi komunikaci s API: {str(e)}")
                import traceback
                print(traceback.format_exc())
        return None

    def process_post(self, post_path, stats):
        """Zpracuje jeden ƒçl√°nek a aktualizuje statistiku."""
        try:
            with open(post_path, 'r', encoding='utf-8') as f:
                post = frontmatter.load(f)
            stats['total'] += 1
            if post.metadata.get("summary_points"):
                print(f"\n‚úì ƒål√°nek ji≈æ m√° shrnut√≠: {post_path.name}")
                stats['already_summarized'] += 1
                return stats

            print(f"\n‚öôÔ∏è Generuji shrnut√≠ pro: {post_path.name}")
            text = post.content.strip()
            if not text and post.metadata.get("excerpt"):
                text = post.metadata.get("excerpt").strip()
                print(f"\n‚ö†Ô∏è Pou≈æ√≠v√°m excerpt, proto≈æe content je pr√°zdn√Ω: {post_path.name}")
            if not text:
                print(f"\n‚ùå ƒål√°nek {post_path.name} nem√° textov√Ω obsah, p≈ôeskoƒçuji.")
                stats['failed'] += 1
                return stats

            print(f"Uk√°zka textu (prvn√≠ch 100 znak≈Ø): {text[:100]}")
            summary_points = self.generate_summary(text)
            if summary_points:
                print("\nVygenerovan√© shrnut√≠:")
                for point in summary_points:
                    print(f"  ‚Ä¢ {point}")
                post.metadata["summary_points"] = summary_points
                with open(post_path, 'w', encoding='utf-8') as f:
                    f.write(frontmatter.dumps(post))
                print("‚úì Shrnut√≠ ulo≈æeno.")
                stats['newly_summarized'] += 1
                print("\nƒåek√°m 2 sekundy p≈ôed dal≈°√≠m ƒçl√°nkem...")
                sleep(2)
            else:
                print("‚ùå Nepoda≈ôilo se vygenerovat shrnut√≠ pro: " + post_path.name)
                stats['failed'] += 1
        except Exception as e:
            print(f"‚ùå Chyba p≈ôi zpracov√°n√≠ {post_path.name}: {str(e)}")
            stats['failed'] += 1
        return stats

    def process_year(self, year):
        """
        Zpracuje ƒçl√°nky z adres√°≈ôe _posts pro dan√Ω rok a tak√© ƒçl√°nky z podadres√°≈ôe newsletter (v _posts/newsletter)
        ‚Äì u newsletter ƒçl√°nk≈Ø se datum neovƒõ≈ôuje.
        """
        stats = { 'total': 0, 'already_summarized': 0, 'newly_summarized': 0, 'failed': 0 }
        
        # Zpracov√°n√≠ ƒçl√°nk≈Ø z _posts/<rok>
        year_dir = self.posts_dir / str(year)
        if year_dir.exists():
            posts = list(year_dir.glob("*.md"))
            print(f"\nNalezeno {len(posts)} ƒçl√°nk≈Ø pro rok {year} v adres√°≈ôi {year_dir}")
            for post_path in posts:
                stats = self.process_post(post_path, stats)
        else:
            print(f"\nAdres√°≈ô pro rok {year} neexistuje v {self.posts_dir}")
        
        # Zpracov√°n√≠ ƒçl√°nk≈Ø z podadres√°≈ôe newsletter (v _posts/newsletter) ‚Äì datum se nekontroluje.
        newsletter_path = self.posts_dir / "newsletter"
        if newsletter_path.exists() and not self.newsletter_processed:
            posts = list(newsletter_path.glob("*.md"))
            print(f"\nNalezeno {len(posts)} ƒçl√°nk≈Ø v adres√°≈ôi {newsletter_path} (bez kontroly data)")
            for post_path in posts:
                stats = self.process_post(post_path, stats)
            self.newsletter_processed = True
        elif not newsletter_path.exists():
            print(f"\nAdres√°≈ô {newsletter_path} neexistuje.")
        
        print(f"\n{'='*50}")
        print(f"Statistika pro rok {year} (vƒçetnƒõ newsletteru):")
        print(f"Celkem ƒçl√°nk≈Ø: {stats['total']}")
        print(f"Ji≈æ mƒõlo shrnut√≠: {stats['already_summarized']}")
        print(f"Novƒõ p≈ôid√°no shrnut√≠: {stats['newly_summarized']}")
        print(f"Selhalo: {stats['failed']}")
        return stats


class KeywordManager:
    def __init__(self, posts_dir="_posts", data_dir="_data"):
        self.posts_dir = Path(posts_dir)
        self.data_file = Path(data_dir) / "pojmy.json"
        print(f"Inicializace s data_file: {self.data_file}")
        self.known_keywords = self.load_or_create_keywords_file()
        self.setup_patterns()

    def setup_patterns(self):
        """Nastav√≠ regul√°rn√≠ v√Ωrazy pro detekci kl√≠ƒçov√Ωch slov."""
        # Vytvo≈ô√≠me pattern pro ka≈æd√© kl√≠ƒçov√© slovo
        self.patterns = {}
        for keyword in self.known_keywords:
            if isinstance(keyword, str):
                self.patterns[keyword] = re.compile(rf"\b{re.escape(keyword)}\b")

    def load_or_create_keywords_file(self):
        print(f"Naƒç√≠t√°m soubor s kl√≠ƒçov√Ωmi slovy: {self.data_file}")
        if self.data_file.exists():
            print("Soubor existuje, naƒç√≠t√°m...")
            with open(self.data_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                # Naƒçteme kl√≠ƒçov√° slova z pole keywords
                keywords = []
                if "keywords" in data:
                    for item in data["keywords"]:
                        if "keyword" in item:
                            keywords.append(item["keyword"])
                            # P≈ôid√°me i variace, pokud existuj√≠
                            if "variations" in item:
                                keywords.extend(item["variations"])
                print(f"Naƒçteno {len(keywords)} kl√≠ƒçov√Ωch slov")
                return keywords
        else:
            print("Soubor neexistuje, vytv√°≈ô√≠m nov√Ω...")
            self.data_file.parent.mkdir(parents=True, exist_ok=True)
            return []

    def save_keywords(self):
        print(f"Ukl√°d√°m kl√≠ƒçov√° slova do {self.data_file}")
        print(f"Poƒçet kl√≠ƒçov√Ωch slov k ulo≈æen√≠: {len(self.known_keywords)}")
        
        self.data_file.parent.mkdir(parents=True, exist_ok=True)
        
        with open(self.data_file, 'w', encoding='utf-8') as f:
            json.dump(self.known_keywords, f, ensure_ascii=False, indent=2)
        
        print("Soubor byl √∫spƒõ≈°nƒõ ulo≈æen")
        
        if self.data_file.exists():
            print(f"Soubor existuje a m√° velikost {self.data_file.stat().st_size} bajt≈Ø")
        else:
            print("CHYBA: Soubor nebyl vytvo≈ôen!")

    def get_posts_files(self):
        """Vr√°t√≠ seznam v≈°ech markdown soubor≈Ø v adres√°≈ôi _posts a jeho podadres√°≈ô√≠ch."""
        print(f"\nKontroluji adres√°≈ô: {self.posts_dir.absolute()}")
        
        if not self.posts_dir.exists():
            print(f"Chyba: Adres√°≈ô '{self.posts_dir.absolute()}' neexistuje!")
            return []
            
        # Vyp√≠≈°eme obsah adres√°≈ôe pro debug
        print("\nObsah adres√°≈ôe _posts:")
        for item in self.posts_dir.iterdir():
            print(f"  - {item.name} ({'slo≈æka' if item.is_dir() else 'soubor'})")
            
        # Hled√°me v≈°echny .md soubory rekurzivnƒõ
        print("\nHled√°m .md soubory v podadres√°≈ô√≠ch...")
        files = []
        for path in self.posts_dir.rglob("*.md"):
            if path.is_file():
                files.append(path)
                print(f"  Nalezen: {path.relative_to(self.posts_dir)}")
        
        if not files:
            print(f"\nVarov√°n√≠: V adres√°≈ôi '{self.posts_dir.absolute()}' a jeho podadres√°≈ô√≠ch nebyly nalezeny ≈æ√°dn√© .md soubory!")
            return []
            
        print(f"\nCelkem nalezeno {len(files)} .md soubor≈Ø")
        return files

    def validate_files(self, files):
        if not self.posts_dir.exists():
            print(f"Chyba: Adres√°≈ô '{self.posts_dir}' neexistuje!")
            return False

        if not files:
            print(f"Chyba: V adres√°≈ôi '{self.posts_dir}' a jeho podadres√°≈ô√≠ch nebyly nalezeny ≈æ√°dn√© markdown soubory!")
            return False

        return True

    def analyze_posts(self):
        """Projde ƒçl√°nky a najde v√Ωskyty kl√≠ƒçov√Ωch slov z pojmy.json."""
        files = self.get_posts_files()
        if not self.validate_files(files):
            return

        print(f"Nalezeno {len(files)} soubor≈Ø ke zpracov√°n√≠...")
        total_found = 0
        
        for file in files:
            relative_path = str(file.relative_to(self.posts_dir))
            print(f"\nAnalyzuji: {relative_path}")
            
            try:
                with open(file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # Rozdƒõl√≠me obsah na YAML Front Matter a tƒõlo ƒçl√°nku
                parts = content.split('---', 2)
                if len(parts) < 3:
                    print(f"Chyba: Neplatn√Ω form√°t souboru {relative_path} - chyb√≠ YAML Front Matter")
                    continue
                
                front_matter = parts[1]
                body = parts[2]
                
                # Naƒçteme data z pojmy.json pro kontrolu cest
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    keywords_data = json.load(f)
                
                for keyword_item in keywords_data.get("keywords", []):
                    keyword = keyword_item.get("keyword")
                    if not keyword:
                        continue
                        
                    # Z√≠sk√°me cestu odkazu
                    link = keyword_item.get("link", "")
                    if not link:
                        continue
                        
                    # Kontrola, zda ƒçl√°nek nen√≠ ve stejn√© cestƒõ jako c√≠l odkazu
                    if link.startswith("/"):
                        # Odstran√≠me poƒç√°teƒçn√≠ a koncov√© lom√≠tko
                        link_path = link.strip("/")
                        # Z√≠sk√°me cestu ƒçl√°nku bez p≈ô√≠pony .md
                        article_path = str(file.relative_to(self.posts_dir)).replace(".md", "")
                        # Kontrola, zda cesta ƒçl√°nku obsahuje cestu odkazu
                        if link_path in article_path:
                            print(f"P≈ôeskoƒçeno '{keyword}' - ƒçl√°nek je ve stejn√© cestƒõ jako c√≠l odkazu")
                            continue
                    
                    # Kontrola, zda slovo nen√≠ ji≈æ prolinkovan√© v tƒõle ƒçl√°nku
                    # 1. Kontrola HTML odkaz≈Ø
                    if f"<a href=" in body and keyword in body:
                        # Pokud je v HTML odkazu, p≈ôeskoƒç√≠me
                        continue
                        
                    # 2. Kontrola Markdown odkaz≈Ø
                    if f"[{keyword}](" in body or f"[{keyword}][" in body:
                        # Pokud je v Markdown odkazu, p≈ôeskoƒç√≠me
                        continue
                    
                    # 3. Kontrola, zda slovo nen√≠ souƒç√°st√≠ jin√©ho odkazu
                    # Hled√°me pattern [text](url) nebo [text][ref]
                    if re.search(rf"\[[^\]]*{re.escape(keyword)}[^\]]*\]\([^)]*\)", body) or \
                       re.search(rf"\[[^\]]*{re.escape(keyword)}[^\]]*\]\[[^\]]*\]", body):
                        continue
                    
                    # Hled√°me cel√© slovo v tƒõle ƒçl√°nku
                    pattern = rf"\b{re.escape(keyword)}\b"
                    
                    # Najdeme prvn√≠ v√Ωskyt slova
                    match = re.search(pattern, body)
                    if match:
                        print(f"\nNalezeno '{keyword}' v {relative_path}")
                        print("P≈ôidat odkaz? (a/n): ", end='')
                        if input().lower() == 'a':
                            # Nahrad√≠me pouze prvn√≠ v√Ωskyt slova Markdown odkazem v tƒõle ƒçl√°nku
                            new_body = body[:match.start()] + f"[{keyword}]({link})" + body[match.end():]
                            # Slo≈æ√≠me obsah zpƒõt dohromady
                            new_content = f"---{front_matter}---{new_body}"
                            with open(file, 'w', encoding='utf-8') as f:
                                f.write(new_content)
                            print(f"‚úì Odkaz p≈ôid√°n")
                            total_found += 1
                            
            except Exception as e:
                print(f"Chyba p≈ôi zpracov√°n√≠ souboru {relative_path}: {str(e)}")
        
        print(f"\nHotovo! Nalezeno a zpracov√°no {total_found} v√Ωskyt≈Ø kl√≠ƒçov√Ωch slov.")

    def add_links_to_posts(self):
        """P≈ôid√° odkazy na kl√≠ƒçov√° slova do markdown soubor≈Ø."""
        if not self.known_keywords:
            print("≈Ω√°dn√° kl√≠ƒçov√° slova nejsou definov√°na v pojmy.json")
            return

        print("\nP≈ôid√°v√°m odkazy do ƒçl√°nk≈Ø...")
        files = self.get_posts_files()
        if not files:
            return

        total_modified = 0
        for file_path in files:
            print(f"\nZpracov√°v√°m soubor: {file_path}")
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                original_content = content
                modified = False
                
                for keyword in self.known_keywords:
                    if not isinstance(keyword, str):
                        continue
                        
                    # Kontrola, zda slovo nen√≠ ji≈æ prolinkovan√©
                    # 1. HTML odkaz
                    html_pattern = f"(?<!<[^>]*)({re.escape(keyword)})(?![^<]*>)"
                    # 2. Markdown inline odkaz
                    md_inline_pattern = f"(?<!\\[)({re.escape(keyword)})(?!\\]\\([^)]*\\))"
                    # 3. Markdown reference odkaz
                    md_ref_pattern = f"(?<!\\[)({re.escape(keyword)})(?!\\]\\[[^\\]]*\\]|\\])"
                    
                    # Kombinovan√Ω pattern pro kontrolu v≈°ech typ≈Ø odkaz≈Ø
                    combined_pattern = f"(?<!<[^>]*|\\[)({re.escape(keyword)})(?![^<]*>|\\]\\([^)]*\\)|\\]\\[[^\\]]*\\]|\\])"
                    
                    if re.search(combined_pattern, content):
                        print(f"\nNalezeno '{keyword}' v {file_path}")
                        print("P≈ôidat odkaz? (a/n): ", end='')
                        if input().lower() == 'a':
                            # Nahrad√≠me slovo HTML odkazem
                            content = re.sub(
                                combined_pattern,
                                f"<a href='/{keyword.lower().replace(' ', '-')}/' class='keyword-link'>{keyword}</a>",
                                content
                            )
                            modified = True
                
                if modified:
                    with open(file_path, 'w', encoding='utf-8') as f:
                        f.write(content)
                    print(f"‚úì Soubor {file_path} byl upraven")
                    total_modified += 1
                else:
                    print("≈Ω√°dn√© zmƒõny nebyly provedeny")
                    
            except Exception as e:
                print(f"Chyba p≈ôi zpracov√°n√≠ souboru {file_path}: {str(e)}")
        
        print(f"\nHotovo! Upraveno {total_modified} soubor≈Ø.")

    def show_keywords(self):
        if not self.known_keywords:
            print("≈Ω√°dn√° kl√≠ƒçov√° spojen√≠ nejsou definov√°na")
            return

        sorted_keywords = sorted(
            self.known_keywords.items(),
            key=lambda x: (x[1].get('category', 'Neza≈ôazeno'), -x[1].get('count', 0))
        )
        
        current_category = None
        print("\nExistuj√≠c√≠ kl√≠ƒçov√° spojen√≠:")
        for id, data in sorted_keywords:
            category = data.get('category', 'Neza≈ôazeno')
            if current_category != category:
                current_category = category
                print(f"\n=== {current_category} ===")
            
            print(f"\nID: {id}")
            print(f"N√°zev: {data.get('name', 'Nen√≠ definov√°n')}")
            print(f"Popis: {data.get('description', 'Nen√≠ definov√°n')}")
            print(f"URL: {data.get('url', 'Nen√≠ definov√°na')}")
            print(f"Poƒçet v√Ωskyt≈Ø: {data.get('count', 0)}")
            print(f"Vytvo≈ôeno: {data.get('created', 'Nen√≠ definov√°no')}")
            print(f"Naposledy nalezeno: {data.get('last_found', 'Nen√≠ definov√°no')}")

    def edit_keyword(self):
        self.show_keywords()
        
        print("\nZadejte ID kl√≠ƒçov√©ho spojen√≠ pro √∫pravu: ")
        id = input().strip()
        
        if id not in self.known_keywords:
            print("Kl√≠ƒçov√© spojen√≠ nebylo nalezeno")
            return
        
        keyword = self.known_keywords[id]
        print(f"\n√öprava: {keyword['name']}")
        print("1. Upravit n√°zev")
        print("2. Upravit popis")
        print("3. Upravit URL")
        print("4. Smazat")
        
        print("Vyberte akci (1-4): ")
        choice = input().strip()
        
        if choice == '1':
            print("Nov√Ω n√°zev: ")
            keyword['name'] = input().strip()
        elif choice == '2':
            print("Nov√Ω popis: ")
            keyword['description'] = input().strip()
        elif choice == '3':
            print("Nov√© URL: ")
            keyword['url'] = input().strip()
        elif choice == '4':
            del self.known_keywords[id]
        
        self.save_keywords()
        print("Zmƒõny byly ulo≈æeny")

    def show_main_menu(self):
        print("\n=== Spr√°vce kl√≠ƒçov√Ωch spojen√≠ ===")
        print("1. Analyzovat ƒçl√°nky a naj√≠t nov√° kl√≠ƒçov√° spojen√≠")
        print("2. Spravovat existuj√≠c√≠ kl√≠ƒçov√° spojen√≠")
        print("3. Konec")
        print("\nVyberte akci (1-3): ")

    def show_editor_menu(self):
        while True:
            print("\n=== Editor kl√≠ƒçov√Ωch spojen√≠ ===")
            print("1. Zobrazit existuj√≠c√≠ kl√≠ƒçov√° spojen√≠")
            print("2. P≈ôidat odkazy do ƒçl√°nk≈Ø")
            print("3. Upravit existuj√≠c√≠ kl√≠ƒçov√© spojen√≠")
            print("4. Zpƒõt do hlavn√≠ho menu")
            
            print("\nVyberte akci (1-4): ")
            choice = input().strip()
            
            if choice == '1':
                self.show_keywords()
            elif choice == '2':
                self.add_links_to_posts()
            elif choice == '3':
                self.edit_keyword()
            elif choice == '4':
                break
            else:
                print("Neplatn√° volba")

    def run(self):
        while True:
            self.show_main_menu()
            choice = input().strip()

            if choice == '1':
                print("Spou≈°t√≠m automatickou anal√Ωzu ƒçl√°nk≈Ø...")
                self.analyze_posts()
            elif choice == '2':
                self.show_editor_menu()
            elif choice == '3':
                print("Ukonƒçuji program...")
                break
            else:
                print(f"Neplatn√° volba: '{choice}'")

def main():
    print("\nV√≠tejte v n√°stroji pro pr√°ci s Markdown ƒçl√°nky!")
    
    # V√Ωbƒõr re≈æimu
    print("Vyberte re≈æim:")
    print("1. Generov√°n√≠ shrnut√≠ ƒçl√°nk≈Ø")
    print("2. Validace Markdown soubor≈Ø")
    print("3. Oprava probl√©m≈Ø s YAML hlaviƒçkami")
    print("4. Spr√°va kl√≠ƒçov√Ωch spojen√≠")
    
    while True:
        mode = input("Zadejte re≈æim (1-4): ").strip()
        if mode in ["1", "2", "3", "4"]:
            break
        print("Neplatn√° volba. Zadejte ƒç√≠slo 1-4.")
    
    # Re≈æim generov√°n√≠ shrnut√≠
    if mode == "1":
        # Naƒçten√≠ API kl√≠ƒçe
        api_key = os.getenv("OPENROUTER_API_KEY")
        print(f"Naƒç√≠t√°n√≠ .env souboru z: {env_path}")
        print(f"Existuje soubor .env: {os.path.exists(env_path)}")
        print(f"Dostupn√© promƒõnn√© prost≈ôed√≠: {list(os.environ.keys())}")
        
        if not api_key:
            print("‚ö†Ô∏è API kl√≠ƒç OPENROUTER_API_KEY nebyl nalezen v promƒõnn√Ωch prost≈ôed√≠!")
            api_key = input("Zadejte v√°≈° OpenRouter API kl√≠ƒç: ").strip()
        else:
            print(f"Nalezen API kl√≠ƒç OPENROUTER_API_KEY: {api_key[:10]}... (d√©lka: {len(api_key)})")
        
        # V√Ωbƒõr modelu
        while True:
            model_choice = input("Vyberte model (1 = DeepSeek, 2 = Gemini): ").strip()
            if model_choice in ["1", "2"]:
                break
            print("Neplatn√° volba. Zadejte 1 nebo 2.")
        
        model_choice = "deepseek" if model_choice == "1" else "gemini"
        generator = LocalSummaryGenerator(api_key, model_choice)
        
        try:
            year = int(input("Zadejte rok, od kter√©ho chcete zaƒç√≠t (2002-2025): "))
        except ValueError:
            print("Neplatn√Ω vstup pro rok.")
            return
        if not 2002 <= year <= 2025:
            print("Rok mus√≠ b√Ωt mezi 2002 a 2025")
            return
        
        while year >= 2002:
            print(f"\n{'='*50}")
            print(f"Zpracov√°v√°m rok {year}")
            print(f"{'='*50}")
            generator.process_year(year)
            year -= 1
        print("\nGenerov√°n√≠ shrnut√≠ dokonƒçeno.")
    
    # Re≈æim validace nebo opravy Markdown soubor≈Ø
    elif mode in ["2", "3"]:
        fix_issues = (mode == "3")
        
        # Urƒçen√≠ adres√°≈ôe pro validaci
        while True:
            dir_choice = input("Vyberte adres√°≈ô (1 = _posts, 2 = vlastn√≠ cesta): ").strip()
            if dir_choice in ["1", "2"]:
                break
            print("Neplatn√° volba. Zadejte 1 nebo 2.")
        
        if dir_choice == "1":
            directory = Path("_posts")
        else:
            directory = Path(input("Zadejte absolutn√≠ cestu k adres√°≈ôi: ").strip())
        
        if not directory.exists():
            print(f"Adres√°≈ô {directory} neexistuje.")
            return
        
        validator = MarkdownValidator(fix_issues=fix_issues)
        
        action_text = "Opravuji" if fix_issues else "Validuji"
        print(f"\n{action_text} Markdown soubory v adres√°≈ôi {directory}...")
        
        success = validator.validate_all_md_files(directory)
        
        if success:
            print(f"\n‚úÖ {action_text} dokonƒçena √∫spƒõ≈°nƒõ.")
        else:
            print(f"\n‚ùå {action_text} dokonƒçena s chybami.")
            if not fix_issues:
                print("\nPro automatickou opravu chyb spus≈•te program znovu v re≈æimu opravy (3).")
    
    # Re≈æim spr√°vy kl√≠ƒçov√Ωch spojen√≠
    elif mode == "4":
        try:
            print("Spou≈°t√≠m spr√°vce kl√≠ƒçov√Ωch spojen√≠...")
            manager = KeywordManager()
            manager.run()
        except Exception as e:
            print(f"CHYBA v hlavn√≠m programu: {str(e)}")
            import traceback
            print(traceback.format_exc())

if __name__ == "__main__":
    main()