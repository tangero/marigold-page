name: Test OneSignal Notification

on:
  workflow_dispatch:
    inputs:
      article_path:
        description: 'Cesta k ƒçl√°nku (nap≈ô. _posts/2025/2025-10-21-openai-prohlizec-atlas.md)'
        required: false
        default: '_posts/2025/2025-10-21-openai-prohlizec-atlas.md'

jobs:
  test-notify:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pyyaml

    - name: Send Test Notification
      env:
        ONESIGNAL_REST_API_KEY: ${{ secrets.ONESIGNAL_REST_API_KEY }}
        ONESIGNAL_APP_ID: ${{ secrets.ONESIGNAL_APP_ID }}
      run: |
        cat << 'EOF' > test_notify.py
        #!/usr/bin/env python3
        import os
        import sys
        import yaml
        import requests
        from pathlib import Path

        def send_notification(title, message):
            api_key = os.getenv('ONESIGNAL_REST_API_KEY')
            app_id = os.getenv('ONESIGNAL_APP_ID')

            if not api_key or not app_id:
                print("‚ùå Chyb√≠ API kl√≠ƒçe")
                print(f"API Key: {'‚úÖ' if api_key else '‚ùå'}")
                print(f"App ID: {'‚úÖ' if app_id else '‚ùå'}")
                return False

            url = "https://onesignal.com/api/v1/notifications"
            headers = {
                "Content-Type": "application/json; charset=utf-8",
                "Authorization": f"Basic {api_key}"
            }

            payload = {
                "app_id": app_id,
                "included_segments": ["All"],
                "headings": {"en": title},
                "contents": {"en": message},
            }

            print(f"üì§ Odes√≠l√°m notifikaci...")
            print(f"   App ID: {app_id}")
            print(f"   Titulek: {title}")
            print(f"   Zpr√°va: {message[:100]}...")

            try:
                response = requests.post(url, json=payload, headers=headers, timeout=10)

                if response.status_code in [200, 201]:
                    result = response.json()
                    recipients = result.get('recipients', 0)
                    notification_id = result.get('id', 'unknown')
                    print(f"‚úÖ √öspƒõch!")
                    print(f"   Notification ID: {notification_id}")
                    print(f"   P≈ô√≠jemci: {recipients}")
                    return True
                else:
                    print(f"‚ùå Chyba {response.status_code}")
                    print(f"   Response: {response.text}")
                    return False
            except Exception as e:
                print(f"‚ùå Exception: {e}")
                import traceback
                traceback.print_exc()
                return False

        # Naƒç√≠st ƒçl√°nek
        article_path = '${{ github.event.inputs.article_path }}'
        if not article_path:
            article_path = '_posts/2025/2025-10-21-openai-prohlizec-atlas.md'

        print(f"üì∞ Naƒç√≠t√°m ƒçl√°nek: {article_path}")

        try:
            with open(article_path, 'r', encoding='utf-8') as f:
                content = f.read()

            if not content.startswith('---'):
                print("‚ùå ƒål√°nek nem√° front matter")
                sys.exit(1)

            parts = content.split('---', 2)
            if len(parts) < 3:
                print("‚ùå Neplatn√Ω front matter")
                sys.exit(1)

            frontmatter = yaml.safe_load(parts[1])
            title = frontmatter.get('title', 'Bez n√°zvu')
            summary = frontmatter.get('post_excerpt', frontmatter.get('summary', title))

            print(f"   Titulek: {title}")
            print(f"   Shrnut√≠: {summary[:100]}...")

            # Poslat notifikaci
            if send_notification(f"üÜï {title}", summary):
                print("\n‚úÖ Test √∫spƒõ≈°n√Ω!")
                sys.exit(0)
            else:
                print("\n‚ùå Test selhal!")
                sys.exit(1)

        except Exception as e:
            print(f"‚ùå Chyba: {e}")
            import traceback
            traceback.print_exc()
            sys.exit(1)
        EOF

        python test_notify.py
